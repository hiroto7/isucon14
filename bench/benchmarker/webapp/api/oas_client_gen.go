// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// AcceptRequest invokes accept-request operation.
	//
	// ドライバーが配車要求を受理する.
	//
	// POST /driver/requests/{request_id}/accept
	AcceptRequest(ctx context.Context, params AcceptRequestParams) (AcceptRequestRes, error)
	// ActivateDriver invokes activate-driver operation.
	//
	// ドライバーが配車受付を開始する.
	//
	// POST /driver/activate
	ActivateDriver(ctx context.Context, request *ActivateDriverReq) error
	// DeactivateDriver invokes deactivate-driver operation.
	//
	// ドライバーが配車受付を停止する.
	//
	// POST /driver/deactivate
	DeactivateDriver(ctx context.Context, request *DeactivateDriverReq) error
	// DenyRequest invokes deny-request operation.
	//
	// ドライバーが配車要求を拒否する.
	//
	// POST /driver/requests/{request_id}/deny
	DenyRequest(ctx context.Context, params DenyRequestParams) (DenyRequestRes, error)
	// Depart invokes depart operation.
	//
	// ドライバーが配車位置から出発する(ユーザーが乗車完了した).
	//
	// POST /driver/requests/{request_id}/depart
	Depart(ctx context.Context, params DepartParams) (DepartRes, error)
	// Evaluate invokes evaluate operation.
	//
	// ユーザーがドライバーを評価する.
	//
	// POST /app/requests/{request_id}/evaluate
	Evaluate(ctx context.Context, request OptEvaluateReq, params EvaluateParams) (EvaluateRes, error)
	// GetAppNotification invokes get-app-notification operation.
	//
	// ポーリング方式にしない場合に、ユーザーのアプリに配車要求の各種状態遷移を通知するなどに使う想定.
	//
	// GET /app/notification
	GetAppNotification(ctx context.Context) error
	// GetAppRequest invokes get-app-request operation.
	//
	// ユーザーが配車要求の状態を確認する.
	//
	// GET /app/requests/{request_id}
	GetAppRequest(ctx context.Context, params GetAppRequestParams) (GetAppRequestRes, error)
	// GetDriverNotification invokes get-driver-notification operation.
	//
	// ドライバーに配車要求を通知するなどで使う想定.
	//
	// GET /driver/notification
	GetDriverNotification(ctx context.Context) error
	// GetInquiries invokes get-inquiries operation.
	//
	// 問い合わせの一覧を取得する.
	//
	// GET /admin/inquiries
	GetInquiries(ctx context.Context, params GetInquiriesParams) (*GetInquiriesOK, error)
	// GetInquiry invokes get-inquiry operation.
	//
	// 指定したIDの問い合わせ内容を取得.
	//
	// GET /admin/inquiries/{inquiry_id}
	GetInquiry(ctx context.Context, params GetInquiryParams) (GetInquiryRes, error)
	// GetRequest invokes get-request operation.
	//
	// ドライバー向け通知エンドポイントから通知されたidの情報を取得する想定.
	//
	// GET /driver/requests/{request_id}
	GetRequest(ctx context.Context, params GetRequestParams) (GetRequestRes, error)
	// Initialize invokes initialize operation.
	//
	// サービスを初期化する.
	//
	// POST /initialize
	Initialize(ctx context.Context) (*InitializeOK, error)
	// PostDriverCoordinate invokes post-driver-coordinate operation.
	//
	// ドライバーが位置情報を送信する.
	//
	// POST /driver/coordinate
	PostDriverCoordinate(ctx context.Context, request OptCoordinate) error
	// PostInquiry invokes post-inquiry operation.
	//
	// ユーザーが問い合わせを送信する.
	//
	// POST /app/inquiry
	PostInquiry(ctx context.Context, request OptPostInquiryReq) error
	// PostRequest invokes post-request operation.
	//
	// ユーザーが配車要求を行う.
	//
	// POST /app/requests
	PostRequest(ctx context.Context, request OptPostRequestReq) (*PostRequestAccepted, error)
	// RegisterDriver invokes register-driver operation.
	//
	// ドライバー登録を行う.
	//
	// POST /driver/register
	RegisterDriver(ctx context.Context, request OptRegisterDriverReq) (*RegisterDriverCreated, error)
	// RegisterUser invokes register-user operation.
	//
	// ユーザーが会員登録を行う.
	//
	// POST /app/register
	RegisterUser(ctx context.Context, request OptRegisterUserReq) (RegisterUserRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// AcceptRequest invokes accept-request operation.
//
// ドライバーが配車要求を受理する.
//
// POST /driver/requests/{request_id}/accept
func (c *Client) AcceptRequest(ctx context.Context, params AcceptRequestParams) (AcceptRequestRes, error) {
	res, err := c.sendAcceptRequest(ctx, params)
	return res, err
}

func (c *Client) sendAcceptRequest(ctx context.Context, params AcceptRequestParams) (res AcceptRequestRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/driver/requests/"
	{
		// Encode "request_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "request_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.RequestID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/accept"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAcceptRequestResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ActivateDriver invokes activate-driver operation.
//
// ドライバーが配車受付を開始する.
//
// POST /driver/activate
func (c *Client) ActivateDriver(ctx context.Context, request *ActivateDriverReq) error {
	_, err := c.sendActivateDriver(ctx, request)
	return err
}

func (c *Client) sendActivateDriver(ctx context.Context, request *ActivateDriverReq) (res *ActivateDriverNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/driver/activate"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeActivateDriverRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeActivateDriverResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeactivateDriver invokes deactivate-driver operation.
//
// ドライバーが配車受付を停止する.
//
// POST /driver/deactivate
func (c *Client) DeactivateDriver(ctx context.Context, request *DeactivateDriverReq) error {
	_, err := c.sendDeactivateDriver(ctx, request)
	return err
}

func (c *Client) sendDeactivateDriver(ctx context.Context, request *DeactivateDriverReq) (res *DeactivateDriverNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/driver/deactivate"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeDeactivateDriverRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeactivateDriverResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DenyRequest invokes deny-request operation.
//
// ドライバーが配車要求を拒否する.
//
// POST /driver/requests/{request_id}/deny
func (c *Client) DenyRequest(ctx context.Context, params DenyRequestParams) (DenyRequestRes, error) {
	res, err := c.sendDenyRequest(ctx, params)
	return res, err
}

func (c *Client) sendDenyRequest(ctx context.Context, params DenyRequestParams) (res DenyRequestRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/driver/requests/"
	{
		// Encode "request_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "request_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.RequestID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/deny"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDenyRequestResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// Depart invokes depart operation.
//
// ドライバーが配車位置から出発する(ユーザーが乗車完了した).
//
// POST /driver/requests/{request_id}/depart
func (c *Client) Depart(ctx context.Context, params DepartParams) (DepartRes, error) {
	res, err := c.sendDepart(ctx, params)
	return res, err
}

func (c *Client) sendDepart(ctx context.Context, params DepartParams) (res DepartRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/driver/requests/"
	{
		// Encode "request_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "request_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.RequestID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/depart"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDepartResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// Evaluate invokes evaluate operation.
//
// ユーザーがドライバーを評価する.
//
// POST /app/requests/{request_id}/evaluate
func (c *Client) Evaluate(ctx context.Context, request OptEvaluateReq, params EvaluateParams) (EvaluateRes, error) {
	res, err := c.sendEvaluate(ctx, request, params)
	return res, err
}

func (c *Client) sendEvaluate(ctx context.Context, request OptEvaluateReq, params EvaluateParams) (res EvaluateRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/app/requests/"
	{
		// Encode "request_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "request_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.RequestID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/evaluate"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeEvaluateRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeEvaluateResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAppNotification invokes get-app-notification operation.
//
// ポーリング方式にしない場合に、ユーザーのアプリに配車要求の各種状態遷移を通知するなどに使う想定.
//
// GET /app/notification
func (c *Client) GetAppNotification(ctx context.Context) error {
	_, err := c.sendGetAppNotification(ctx)
	return err
}

func (c *Client) sendGetAppNotification(ctx context.Context) (res *GetAppNotificationOK, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/app/notification"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAppNotificationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAppRequest invokes get-app-request operation.
//
// ユーザーが配車要求の状態を確認する.
//
// GET /app/requests/{request_id}
func (c *Client) GetAppRequest(ctx context.Context, params GetAppRequestParams) (GetAppRequestRes, error) {
	res, err := c.sendGetAppRequest(ctx, params)
	return res, err
}

func (c *Client) sendGetAppRequest(ctx context.Context, params GetAppRequestParams) (res GetAppRequestRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/app/requests/"
	{
		// Encode "request_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "request_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.RequestID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAppRequestResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetDriverNotification invokes get-driver-notification operation.
//
// ドライバーに配車要求を通知するなどで使う想定.
//
// GET /driver/notification
func (c *Client) GetDriverNotification(ctx context.Context) error {
	_, err := c.sendGetDriverNotification(ctx)
	return err
}

func (c *Client) sendGetDriverNotification(ctx context.Context) (res *GetDriverNotificationOK, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/driver/notification"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetDriverNotificationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetInquiries invokes get-inquiries operation.
//
// 問い合わせの一覧を取得する.
//
// GET /admin/inquiries
func (c *Client) GetInquiries(ctx context.Context, params GetInquiriesParams) (*GetInquiriesOK, error) {
	res, err := c.sendGetInquiries(ctx, params)
	return res, err
}

func (c *Client) sendGetInquiries(ctx context.Context, params GetInquiriesParams) (res *GetInquiriesOK, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/admin/inquiries"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "limit" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Limit.Get(); ok {
				return e.EncodeValue(conv.Float64ToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "cursor" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "cursor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Cursor.Get(); ok {
				return e.EncodeValue(conv.StringToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetInquiriesResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetInquiry invokes get-inquiry operation.
//
// 指定したIDの問い合わせ内容を取得.
//
// GET /admin/inquiries/{inquiry_id}
func (c *Client) GetInquiry(ctx context.Context, params GetInquiryParams) (GetInquiryRes, error) {
	res, err := c.sendGetInquiry(ctx, params)
	return res, err
}

func (c *Client) sendGetInquiry(ctx context.Context, params GetInquiryParams) (res GetInquiryRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/admin/inquiries/"
	{
		// Encode "inquiry_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "inquiry_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.InquiryID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetInquiryResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetRequest invokes get-request operation.
//
// ドライバー向け通知エンドポイントから通知されたidの情報を取得する想定.
//
// GET /driver/requests/{request_id}
func (c *Client) GetRequest(ctx context.Context, params GetRequestParams) (GetRequestRes, error) {
	res, err := c.sendGetRequest(ctx, params)
	return res, err
}

func (c *Client) sendGetRequest(ctx context.Context, params GetRequestParams) (res GetRequestRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/driver/requests/"
	{
		// Encode "request_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "request_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.RequestID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetRequestResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// Initialize invokes initialize operation.
//
// サービスを初期化する.
//
// POST /initialize
func (c *Client) Initialize(ctx context.Context) (*InitializeOK, error) {
	res, err := c.sendInitialize(ctx)
	return res, err
}

func (c *Client) sendInitialize(ctx context.Context) (res *InitializeOK, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/initialize"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeInitializeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostDriverCoordinate invokes post-driver-coordinate operation.
//
// ドライバーが位置情報を送信する.
//
// POST /driver/coordinate
func (c *Client) PostDriverCoordinate(ctx context.Context, request OptCoordinate) error {
	_, err := c.sendPostDriverCoordinate(ctx, request)
	return err
}

func (c *Client) sendPostDriverCoordinate(ctx context.Context, request OptCoordinate) (res *PostDriverCoordinateNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/driver/coordinate"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostDriverCoordinateRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePostDriverCoordinateResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostInquiry invokes post-inquiry operation.
//
// ユーザーが問い合わせを送信する.
//
// POST /app/inquiry
func (c *Client) PostInquiry(ctx context.Context, request OptPostInquiryReq) error {
	_, err := c.sendPostInquiry(ctx, request)
	return err
}

func (c *Client) sendPostInquiry(ctx context.Context, request OptPostInquiryReq) (res *PostInquiryNoContent, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/app/inquiry"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostInquiryRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePostInquiryResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostRequest invokes post-request operation.
//
// ユーザーが配車要求を行う.
//
// POST /app/requests
func (c *Client) PostRequest(ctx context.Context, request OptPostRequestReq) (*PostRequestAccepted, error) {
	res, err := c.sendPostRequest(ctx, request)
	return res, err
}

func (c *Client) sendPostRequest(ctx context.Context, request OptPostRequestReq) (res *PostRequestAccepted, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/app/requests"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostRequestRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePostRequestResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RegisterDriver invokes register-driver operation.
//
// ドライバー登録を行う.
//
// POST /driver/register
func (c *Client) RegisterDriver(ctx context.Context, request OptRegisterDriverReq) (*RegisterDriverCreated, error) {
	res, err := c.sendRegisterDriver(ctx, request)
	return res, err
}

func (c *Client) sendRegisterDriver(ctx context.Context, request OptRegisterDriverReq) (res *RegisterDriverCreated, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/driver/register"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeRegisterDriverRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeRegisterDriverResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RegisterUser invokes register-user operation.
//
// ユーザーが会員登録を行う.
//
// POST /app/register
func (c *Client) RegisterUser(ctx context.Context, request OptRegisterUserReq) (RegisterUserRes, error) {
	res, err := c.sendRegisterUser(ctx, request)
	return res, err
}

func (c *Client) sendRegisterUser(ctx context.Context, request OptRegisterUserReq) (res RegisterUserRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/app/register"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeRegisterUserRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeRegisterUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
